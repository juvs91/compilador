import ply.yacc as yacc 

from lexer import listOfTokens

class Sintax():
	def __init__(self):
		l =[]
	def p_program(self,p):
		l =[]
	def p_main(self,p):
		l =[]
	def p_declaration(self,p):
		l =[]
	def p_function(self,p):
		l =[]
	def p_rFunction(self,p):
		l =[]
	def p_block(self,p):
		l =[]
	def p_fBlock(self,p):
		l =[]
	def p_rFBlock(self,p):
		l =[]
	def p_loop(self,p):
		l =[]
	def p_conditional(self,p):
		l =[]
	def p_superExpr(self,p):
		l =[]
	def p_expr(self,p):
		l =[]
	def p_expression(self,p):
		l =[]
	def p_term(self,p):
		l =[]
	def p_factor(self,p):
		l =[]
	def p_instruccion(self,p):
		l =[]
	def p_assign(self,p):
		l =[]
	def p_call(self,p):
		l =[]
	def p_read(self,p):
		l =[]
	def p_print(self,p):
		l =[]
	def p_brush(self,p):
		l =[]
	def p_color(self,p):
		l =[]
	def p_penDown(self,p):
		l =[]
	def p_penUp(self,p):
		l =[]
	def p_home(self,p):
		l =[]
	def p_forward(self,p):
		l =[]
	def p_rotate(self,p):
		l =[]
	def p_circle(self,p):
		l =[]
	def p_arc(self,p):
		l =[]
	def p_square(self,p):
		l =[]
	def p_paramList(self,p):
		l =[]
	def p_param(self,p):
		l =[]
	def p_primitive(self,p):
		l =[]
	def p_identifier(self,p):
		l =[]
	def p_constant(self,p):
		l =[]
	def p_integer(self,p):
		l =[]
	def p_float(self,p):
		l =[]
	def p_string(self,p):
		l =[]
	def p_printable(self,p):
		l =[]
	def p_lower(self,p):
		l =[]
	def p_upper(self,p):
		l =[]
	def p_digit(self,p):
		l =[]
	
	
	